---
- hosts: jenkins_server, all_nodes, db_servers, ELK_server
  become: yes
  become_method: sudo
  vars: 
    keys_path: ./keys
  tasks:
    - include_role:
        name: docker
      when: inventory_hostname in groups['jenkins_server'] or inventory_hostname in groups['all_nodes']   
    - include_role:
        name: mysql
      when: inventory_hostname in groups['db_servers']   
    - include_role:
        name: ELK
      when: inventory_hostname in groups['ELK_server']
    
    - name: Flush docker handlers.
      meta: flush_handlers
   
    - name: Install Java for Debian on all nodes.
      apt:
        name:
        - openjdk-8-jdk
        state: present
        update_cache: yes
      when: inventory_hostname in groups['all_nodes']
  
    - name: Copy jenkins docker YAML file
      copy:
        src: ./jenkins.yml
        dest: ~/jenkins.yml
      when: inventory_hostname in groups['jenkins_server'] 

    - name: Run Jenkins
      script:
        cmd: ./run_jenkins.sh
      when: inventory_hostname in groups['jenkins_server'] 

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      when: inventory_hostname in groups['all_nodes'] and ansible_os_family == 'Debian'

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
      when: inventory_hostname in groups['all_nodes'] and ansible_os_family == 'Debian'

    - name: Install kubectl
      apt: 
        name: 
        - kubectl
        state: present
        update_cache: yes  
      when: inventory_hostname in groups['all_nodes'] and ansible_os_family == 'Debian'

    - name: Install iam authenticator
      get_url:
        url: https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator
        dest: /usr/bin/aws-iam-authenticator
        mode: '0755'
      when: inventory_hostname in groups['all_nodes']

    - name: Install aws cli
      pip: 
        name: 
        - awscli
        state: present  
      when: inventory_hostname in groups['all_nodes']

    - name: Create SSH key and known host key for node
      script:
        cmd: ./create_SSH_key.sh
      when: inventory_hostname in groups['all_nodes'] 

    - name: Fetch the know host key to local machine
      fetch:
        src: "/home/ubuntu/.ssh/{{ansible_user}}_known_host.pub"
        dest: "keys/{{ansible_user}}_known_host.pub"
        flat: yes
      when: inventory_hostname in groups['all_nodes']  

    - name: Copy known host key to Jenkins master
      copy:
        src: "{{keys_path}}/{{ansible_user}}_known_host.pub"
        dest: "/home/{{ansible_user}}/.ssh/{{ansible_user}}_known_host.pub"
      when: inventory_hostname in groups['jenkins_server']

    - name: Copy create node credentials script
      copy:
        src: ./create_credentials.py
        dest: /home/ubuntu/create_credentials.py
        mode: '0755'
      when: inventory_hostname in groups['all_nodes']  

    - name: Creates directory
      file:
        path: /var/jenkins_home/.ssh
        state: directory
        mode: '0755'
      when: inventory_hostname in groups['jenkins_server'] 

    - name: Update Jenkins master known hosts
      shell: cat "/home/{{ansible_user}}/.ssh/{{ansible_user}}_known_host.pub" >> /var/jenkins_home/.ssh/known_hosts
      when: inventory_hostname in groups['jenkins_server'] 

    - name: Wait for port 8080 to become open on the jenkins master.
      wait_for:
        port: 8080
        delay: 10
      when: inventory_hostname in groups['jenkins_server'] 

    - name: Create node credentials
      shell: /home/ubuntu/create_credentials.py {{master_ip}} "/home/{{ansible_user}}/.ssh/{{ansible_user}}_rsa"
      when: inventory_hostname in groups['all_nodes'] 

    - name: Copy create node script
      copy:
        src: ./create_ssh_node.sh
        dest: /home/ubuntu/create_ssh_node.sh
        mode: '0755'
      when: inventory_hostname in groups['all_nodes']       

    - name: Create node 
      shell: echo "y" | /home/ubuntu/create_ssh_node.sh -j "http://{{master_ip}}:8080" -n "{{ansible_user}}-node" -d "{{ansible_user}}-node" -sh {{inventory_hostname}} -s "/home/{{ansible_user}}/jenkins" -c {{ansible_user}} -l linux -u admin -p admin
      when: inventory_hostname in groups['all_nodes']

    - name: Copy kubeconfig to node
      copy:
        src: "{{ item }}"
        dest: /home/ubuntu/kubeconfig_opsSchool-eks
        mode: 0755
      with_fileglob:
        - ../terraform/global/VPC/kubeconfig_*
      when: inventory_hostname in groups['all_nodes']

    - name: Copy helm-consul-values.yaml to node
      copy:
        src: ./helm-consul-values.yaml
        dest: /home/ubuntu
        mode: 0755
      when: inventory_hostname in groups['all_nodes']

    - name: Copy prometheus-values.yml to node
      copy:
        src: ./prometheus-values.yml
        dest: /home/ubuntu
        mode: 0755
      when: inventory_hostname in groups['all_nodes']

    - name: Copy grafana-values.yml to node
      copy:
        src: ./grafana-values.yml
        dest: /home/ubuntu
        mode: 0755
      when: inventory_hostname in groups['all_nodes']

    - name: Copy grafana-dashboards.yml to node
      copy:
        src: ./grafana-dashboards.yml
        dest: /home/ubuntu
        mode: 0755
      when: inventory_hostname in groups['all_nodes']
      
    - name: Run consul helm install
      script:
        cmd: ./run_helm.sh
      when: inventory_hostname in groups['all_nodes']

    - name: Run coreDNS update
      script:
        cmd: ./coredns.sh
      when: inventory_hostname in groups['all_nodes']

    - name: Copy filebeat.yml to node
      copy:
        src: ./filebeat.yml
        dest: /home/ubuntu
        mode: 0755

    - name: Copy system.yml to node
      copy:
        src: ./system.yml
        dest: /home/ubuntu
        mode: 0755

    - name: Copy mysql.yml to node
      copy:
        src: ./mysql.yml
        dest: /home/ubuntu
        mode: 0755

    - name: Run filebeat installation
      script:
        cmd: ./filebeat.sh

    - name: Install jmeter
      apt: 
        name: 
        - jmeter
        state: present
        update_cache: yes  
      when: inventory_hostname in groups['all_nodes']
    
  
